{"ast":null,"code":"// @author Ayondip Jana.\n// @github https://github.com/detronetdip/CURD.js\nclass collection {\n  constructor(ct) {\n    this.count = ct;\n  }\n\n  insertData(data, setFunction) {\n    if (typeof data == \"object\") {\n      this[this.count] = data;\n      var cindex = this.count;\n      this.count++;\n      setFunction.set();\n      return cindex;\n    } else {\n      throw new Error(\"Expected Object Got None\");\n    }\n  }\n\n  count() {\n    return this.count;\n  }\n\n  insertMany(arrayOfObject, sf) {\n    var temp = [];\n    arrayOfObject.forEach(e => {\n      temp.push(this.insertData(e, sf));\n    });\n    return temp;\n  }\n\n}\n\nclass oldCollection {\n  constructor(clcn, oldData, db) {\n    this.count = oldData.count;\n    this.od = oldData;\n    this.init();\n    this.instanceOf = clcn;\n    this.DB = db;\n  }\n\n  init() {\n    for (var i = 0; i < this.count; i++) {\n      this[i] = this.od[i];\n    }\n\n    delete this.od;\n  }\n\n  insertData(data) {\n    if (typeof data == \"object\") {\n      this[this.count] = data;\n      var cindex = this.count;\n      this.count++;\n      this.setData();\n      return cindex;\n    } else {\n      throw new Error(\"Expected Object Got None\");\n    }\n  }\n\n  setData() {\n    var Data = JSON.parse(localStorage.getItem(this.DB.env.dbname));\n    var sync = { ...Data[this.instanceOf],\n      ...this\n    };\n    delete sync.DB;\n    Data[this.instanceOf] = sync;\n    delete sync.instanceOf;\n    localStorage.setItem(this.DB.env.dbname, JSON.stringify(Data));\n  }\n\n  insertMany(arrayOfObject) {\n    var temp = [];\n    arrayOfObject.forEach(e => {\n      temp.push(this.insertData(e));\n    });\n    return temp;\n  }\n\n  count() {\n    return this.count;\n  }\n\n}\n\nclass CURD {\n  constructor(e) {\n    this.env = {\n      dbname: \"database\"\n    };\n    this.env = { ...this.env,\n      ...e\n    };\n    this.database = {};\n    this.init();\n    this._this = this;\n  }\n\n  init() {\n    if (!localStorage.getItem(this.env.dbname)) {\n      localStorage.setItem(this.env.dbname, JSON.stringify(this.database));\n    }\n  }\n\n  createCollection(name) {\n    if (!this.existsCollection(name)) {\n      return this.database[name] = new collection(0);\n    } else {\n      var c = this.getCollection(name, this);\n      delete c[\"DB\"][\"_this\"];\n      return c;\n    }\n  }\n\n  set() {\n    var previous = JSON.parse(localStorage.getItem(this.env.dbname));\n    var final = { ...previous,\n      ...this.database\n    };\n    localStorage.setItem(this.env.dbname, JSON.stringify(final));\n  }\n\n  getCollection(collection, DB) {\n    if (this.existsCollection(collection)) {\n      return new oldCollection(collection, this.readData(collection), DB);\n    } else {\n      throw new Error(\"Collection doesn't exist\");\n    }\n  }\n\n  refineIds(k) {\n    var refinedKeys = [];\n    k.forEach(e => {\n      if (typeof parseInt(e) === \"number\" && !isNaN(parseInt(e))) {\n        refinedKeys.push(parseInt(e));\n      }\n    });\n    return refinedKeys;\n  }\n\n  findData(collection, data) {\n    var k = Object.keys(collection);\n    var receivedKeys = Object.keys(data);\n    var foundObjects = [];\n    var refinedKeys = this.refineIds(k);\n    refinedKeys.forEach(value => {\n      var counter = 0;\n      receivedKeys.forEach(receivedValues => {\n        if (receivedValues in collection[value]) {\n          if (data[receivedValues] === collection[value][receivedValues]) {\n            counter++;\n          }\n        }\n      });\n\n      if (receivedKeys.length === counter) {\n        var tempObj = collection[value];\n        tempObj.objectId = value;\n        foundObjects.push(tempObj);\n      }\n    });\n\n    if (foundObjects === \"\") {\n      return [];\n    } else {\n      return foundObjects;\n    }\n  }\n\n  readData() {\n    let collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var Data = JSON.parse(localStorage.getItem(this.env.dbname));\n\n    if (collection === \"\") {\n      return Data;\n    } else {\n      if (!this.existsCollection(collection)) {\n        return new Error(\"Collection Not Found\");\n      } else {\n        if (data === \"\" && typeof data != \"number\") {\n          return Data[collection];\n        } else {\n          if (typeof data === \"object\") {\n            return this.findData(Data[collection], data);\n          } else if (typeof data === \"number\") {\n            if (Data[collection][data] !== undefined) {\n              return Data[collection][data];\n            } else {\n              return new Error(\"Invalid Id\");\n            }\n          }\n        }\n      }\n    }\n  }\n\n  getId(obj) {\n    let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var temp = [];\n\n    if (count == \"\" && typeof count != \"number\") {\n      obj.forEach(e => {\n        if (\"objectId\" in e) {\n          temp.push(e.objectId);\n        }\n      });\n      return temp;\n    } else {\n      if (count < obj.length) {\n        return obj[count].objectId;\n      } else {\n        return new Error(\"Invalid Index\");\n      }\n    }\n  }\n\n  getAllId(collection) {\n    if (!this.existsCollection(collection)) {\n      return new Error(\"Collection Not Found\");\n    } else {\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\n      var k = this.refineIds(Object.keys(Data[collection]));\n      return k;\n    }\n  }\n\n  existsCollection(collection) {\n    var Data = JSON.parse(localStorage.getItem(this.env.dbname));\n    var keys = Object.keys(Data);\n    var counter = 0;\n\n    for (var i = 0; i < keys.length; i++) {\n      if (collection === keys[i]) {\n        counter++;\n      }\n    }\n\n    if (counter > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  deleteField(collection) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    let field = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (this.existsCollection(collection)) {\n      if (index == \"\" && typeof index != \"number\") {\n        throw new Error(\"Index Required\");\n      } else {\n        var Data = JSON.parse(localStorage.getItem(this.env.dbname));\n        var ExistingIds = this.refineIds(Object.keys(Data[collection]));\n\n        if (ExistingIds.includes(index)) {\n          if (field in Data[collection][index]) {\n            delete Data[collection][index][field];\n            localStorage.setItem(this.env.dbname, JSON.stringify(Data));\n          } else {\n            console.log(new Error(\"Field does not exist\"));\n          }\n        } else {\n          throw new Error(\"Invalid Index\");\n        }\n      }\n    } else {\n      throw new Error(\"Collection doesn't exist\");\n    }\n  }\n\n  deleteCollection(collection) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    if (this.existsCollection(collection)) {\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\n\n      if (index == \"\" && typeof index != \"number\") {\n        delete Data[collection];\n        localStorage.setItem(this.env.dbname, JSON.stringify(Data));\n      } else {\n        var ExistingIds = this.refineIds(Object.keys(Data[collection]));\n\n        if (ExistingIds.includes(index)) {\n          delete Data[collection][index];\n          Data[collection].count = --Data[collection].count;\n          localStorage.setItem(this.env.dbname, JSON.stringify(Data));\n        } else {\n          throw new Error(\"Invalid Index\");\n        }\n      }\n    } else {\n      throw new Error(\"Collection doesn't exist\");\n    }\n  }\n\n  ud(Data, collection, index, updatedData) {\n    var newKeys = Object.keys(updatedData);\n    newKeys.forEach(e => {\n      Data[collection][index][e] = updatedData[e];\n    });\n    localStorage.setItem(this.env.dbname, JSON.stringify(Data));\n  }\n\n  uD(collection, index, updatedData) {\n    if (index == \"\" && typeof index != \"number\") {\n      throw new Error(\"Index Required\");\n    } else {\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\n      var ExistingIds = this.refineIds(Object.keys(Data[collection]));\n\n      if (ExistingIds.includes(index)) {\n        if (typeof updatedData == \"object\" && Object.keys(updatedData).length !== 0) {\n          this.ud(Data, collection, index, updatedData);\n        } else {\n          if (Object.keys(updatedData).length === 0) {\n            throw new Error(\"Empty Object can not be passed\");\n          } else {\n            throw new Error(\"Expected Object got none\");\n          }\n        }\n      } else {\n        throw new Error(\"Invalid Index\");\n      }\n    }\n  }\n\n  Id(col, obj) {\n    return this.getId(this.readData(col, obj), 0);\n  }\n\n  updateData(collection, index) {\n    let updatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n    if (this.existsCollection(collection)) {\n      if (typeof index == \"undefined\") {\n        throw new Error(\"Index Required\");\n      } else {\n        if (updatedData == \"\") {\n          throw new Error(\"Expected Object got none\");\n        } else {\n          if (Array.isArray(index)) {\n            if (index.length > 0) {\n              index.forEach(id => {\n                this.uD(collection, id, updatedData);\n              });\n            } else {\n              throw new Error(\"Empty array passed\");\n            }\n          } else {\n            this.uD(collection, index, updatedData);\n          }\n        }\n      }\n    } else {\n      throw new Error(\"Collection doesn't exist\");\n    }\n  }\n\n  getKeys(e) {\n    return this.refineIds(Object.keys(e));\n  }\n\n}\n\nexport default new CURD();","map":{"version":3,"names":["collection","constructor","ct","count","insertData","data","setFunction","cindex","set","Error","insertMany","arrayOfObject","sf","temp","forEach","e","push","oldCollection","clcn","oldData","db","od","init","instanceOf","DB","i","setData","Data","JSON","parse","localStorage","getItem","env","dbname","sync","setItem","stringify","CURD","database","_this","createCollection","name","existsCollection","c","getCollection","previous","final","readData","refineIds","k","refinedKeys","parseInt","isNaN","findData","Object","keys","receivedKeys","foundObjects","value","counter","receivedValues","length","tempObj","objectId","undefined","getId","obj","getAllId","deleteField","index","field","ExistingIds","includes","console","log","deleteCollection","ud","updatedData","newKeys","uD","Id","col","updateData","Array","isArray","id","getKeys"],"sources":["C:/internship/Degree-of-seperation/src/curd/curd.js"],"sourcesContent":["// @author Ayondip Jana.\r\n// @github https://github.com/detronetdip/CURD.js\r\nclass collection {\r\n  constructor(ct) {\r\n    this.count = ct;\r\n  }\r\n  insertData(data, setFunction) {\r\n    if (typeof data == \"object\") {\r\n      this[this.count] = data;\r\n      var cindex = this.count;\r\n      this.count++;\r\n      setFunction.set();\r\n      return cindex;\r\n    } else {\r\n      throw new Error(\"Expected Object Got None\");\r\n    }\r\n  }\r\n  count() {\r\n    return this.count;\r\n  }\r\n  insertMany(arrayOfObject, sf) {\r\n    var temp = [];\r\n    arrayOfObject.forEach((e) => {\r\n      temp.push(this.insertData(e, sf));\r\n    });\r\n    return temp;\r\n  }\r\n}\r\nclass oldCollection {\r\n  constructor(clcn, oldData, db) {\r\n    this.count = oldData.count;\r\n    this.od = oldData;\r\n    this.init();\r\n    this.instanceOf = clcn;\r\n    this.DB = db;\r\n  }\r\n  init() {\r\n    for (var i = 0; i < this.count; i++) {\r\n      this[i] = this.od[i];\r\n    }\r\n    delete this.od;\r\n  }\r\n  insertData(data) {\r\n    if (typeof data == \"object\") {\r\n      this[this.count] = data;\r\n      var cindex = this.count;\r\n      this.count++;\r\n      this.setData();\r\n      return cindex;\r\n    } else {\r\n      throw new Error(\"Expected Object Got None\");\r\n    }\r\n  }\r\n  setData() {\r\n    var Data = JSON.parse(localStorage.getItem(this.DB.env.dbname));\r\n    var sync = { ...Data[this.instanceOf], ...this };\r\n    delete sync.DB;\r\n    Data[this.instanceOf] = sync;\r\n    delete sync.instanceOf;\r\n    localStorage.setItem(this.DB.env.dbname, JSON.stringify(Data));\r\n  }\r\n  insertMany(arrayOfObject) {\r\n    var temp = [];\r\n    arrayOfObject.forEach((e) => {\r\n      temp.push(this.insertData(e));\r\n    });\r\n    return temp;\r\n  }\r\n  count() {\r\n    return this.count;\r\n  }\r\n}\r\nclass CURD {\r\n  constructor(e) {\r\n    this.env = {\r\n      dbname: \"database\",\r\n    };\r\n    this.env = { ...this.env, ...e };\r\n    this.database = {};\r\n    this.init();\r\n    this._this = this;\r\n  }\r\n  init() {\r\n    if (!localStorage.getItem(this.env.dbname)) {\r\n      localStorage.setItem(this.env.dbname, JSON.stringify(this.database));\r\n    }\r\n  }\r\n  createCollection(name) {\r\n    if (!this.existsCollection(name)) {\r\n      return (this.database[name] = new collection(0));\r\n    } else {\r\n      var c = this.getCollection(name, this);\r\n      delete c[\"DB\"][\"_this\"];\r\n      return c;\r\n    }\r\n  }\r\n  set() {\r\n    var previous = JSON.parse(localStorage.getItem(this.env.dbname));\r\n    var final = { ...previous, ...this.database };\r\n    localStorage.setItem(this.env.dbname, JSON.stringify(final));\r\n  }\r\n  getCollection(collection, DB) {\r\n    if (this.existsCollection(collection)) {\r\n      return new oldCollection(collection, this.readData(collection), DB);\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  refineIds(k) {\r\n    var refinedKeys = [];\r\n    k.forEach((e) => {\r\n      if (typeof parseInt(e) === \"number\" && !isNaN(parseInt(e))) {\r\n        refinedKeys.push(parseInt(e));\r\n      }\r\n    });\r\n    return refinedKeys;\r\n  }\r\n  findData(collection, data) {\r\n    var k = Object.keys(collection);\r\n    var receivedKeys = Object.keys(data);\r\n    var foundObjects = [];\r\n    var refinedKeys = this.refineIds(k);\r\n    refinedKeys.forEach((value) => {\r\n      var counter = 0;\r\n      receivedKeys.forEach((receivedValues) => {\r\n        if (receivedValues in collection[value]) {\r\n          if (data[receivedValues] === collection[value][receivedValues]) {\r\n            counter++;\r\n          }\r\n        }\r\n      });\r\n      if (receivedKeys.length === counter) {\r\n        var tempObj = collection[value];\r\n        tempObj.objectId = value;\r\n        foundObjects.push(tempObj);\r\n      }\r\n    });\r\n    if (foundObjects === \"\") {\r\n      return [];\r\n    } else {\r\n      return foundObjects;\r\n    }\r\n  }\r\n  readData(collection = \"\", data = \"\") {\r\n    var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n    if (collection === \"\") {\r\n      return Data;\r\n    } else {\r\n      if (!this.existsCollection(collection)) {\r\n        return new Error(\"Collection Not Found\");\r\n      } else {\r\n        if (data === \"\" && typeof data != \"number\") {\r\n          return Data[collection];\r\n        } else {\r\n          if (typeof data === \"object\") {\r\n            return this.findData(Data[collection], data);\r\n          } else if (typeof data === \"number\") {\r\n            if (Data[collection][data] !== undefined) {\r\n              return Data[collection][data];\r\n            } else {\r\n              return new Error(\"Invalid Id\");\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getId(obj, count = \"\") {\r\n    var temp = [];\r\n    if (count == \"\" && typeof count != \"number\") {\r\n      obj.forEach((e) => {\r\n        if (\"objectId\" in e) {\r\n          temp.push(e.objectId);\r\n        }\r\n      });\r\n      return temp;\r\n    } else {\r\n      if (count < obj.length) {\r\n        return obj[count].objectId;\r\n      } else {\r\n        return new Error(\"Invalid Index\");\r\n      }\r\n    }\r\n  }\r\n  getAllId(collection) {\r\n    if (!this.existsCollection(collection)) {\r\n      return new Error(\"Collection Not Found\");\r\n    } else {\r\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n      var k = this.refineIds(Object.keys(Data[collection]));\r\n      return k;\r\n    }\r\n  }\r\n  existsCollection(collection) {\r\n    var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n    var keys = Object.keys(Data);\r\n    var counter = 0;\r\n    for (var i = 0; i < keys.length; i++) {\r\n      if (collection === keys[i]) {\r\n        counter++;\r\n      }\r\n    }\r\n    if (counter > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  deleteField(collection, index = \"\", field) {\r\n    if (this.existsCollection(collection)) {\r\n      if (index == \"\" && typeof index != \"number\") {\r\n        throw new Error(\"Index Required\");\r\n      } else {\r\n        var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n        var ExistingIds = this.refineIds(Object.keys(Data[collection]));\r\n        if (ExistingIds.includes(index)) {\r\n          if (field in Data[collection][index]) {\r\n            delete Data[collection][index][field];\r\n            localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n          } else {\r\n            console.log(new Error(\"Field does not exist\"));\r\n          }\r\n        } else {\r\n          throw new Error(\"Invalid Index\");\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  deleteCollection(collection, index = \"\") {\r\n    if (this.existsCollection(collection)) {\r\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n      if (index == \"\" && typeof index != \"number\") {\r\n        delete Data[collection];\r\n        localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n      } else {\r\n        var ExistingIds = this.refineIds(Object.keys(Data[collection]));\r\n        if (ExistingIds.includes(index)) {\r\n          delete Data[collection][index];\r\n          Data[collection].count = --Data[collection].count;\r\n          localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n        } else {\r\n          throw new Error(\"Invalid Index\");\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  ud(Data, collection, index, updatedData) {\r\n    var newKeys = Object.keys(updatedData);\r\n    newKeys.forEach((e) => {\r\n      Data[collection][index][e] = updatedData[e];\r\n    });\r\n    localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n  }\r\n  uD(collection, index, updatedData) {\r\n    if (index == \"\" && typeof index != \"number\") {\r\n      throw new Error(\"Index Required\");\r\n    } else {\r\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n      var ExistingIds = this.refineIds(Object.keys(Data[collection]));\r\n      if (ExistingIds.includes(index)) {\r\n        if (\r\n          typeof updatedData == \"object\" &&\r\n          Object.keys(updatedData).length !== 0\r\n        ) {\r\n          this.ud(Data, collection, index, updatedData);\r\n        } else {\r\n          if (Object.keys(updatedData).length === 0) {\r\n            throw new Error(\"Empty Object can not be passed\");\r\n          } else {\r\n            throw new Error(\"Expected Object got none\");\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error(\"Invalid Index\");\r\n      }\r\n    }\r\n  }\r\n  Id(col, obj) {\r\n    return this.getId(this.readData(col, obj), 0);\r\n  }\r\n  updateData(collection, index, updatedData = \"\") {\r\n    if (this.existsCollection(collection)) {\r\n      if (typeof index == \"undefined\") {\r\n        throw new Error(\"Index Required\");\r\n      } else {\r\n        if (updatedData == \"\") {\r\n          throw new Error(\"Expected Object got none\");\r\n        } else {\r\n          if (Array.isArray(index)) {\r\n            if (index.length > 0) {\r\n              index.forEach((id) => {\r\n                this.uD(collection, id, updatedData);\r\n              });\r\n            } else {\r\n              throw new Error(\"Empty array passed\");\r\n            }\r\n          } else {\r\n            this.uD(collection, index, updatedData);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  getKeys(e) {\r\n    return this.refineIds(Object.keys(e));\r\n  }\r\n}\r\nexport default new CURD();\r\n"],"mappings":"AAAA;AACA;AACA,MAAMA,UAAN,CAAiB;EACfC,WAAW,CAACC,EAAD,EAAK;IACd,KAAKC,KAAL,GAAaD,EAAb;EACD;;EACDE,UAAU,CAACC,IAAD,EAAOC,WAAP,EAAoB;IAC5B,IAAI,OAAOD,IAAP,IAAe,QAAnB,EAA6B;MAC3B,KAAK,KAAKF,KAAV,IAAmBE,IAAnB;MACA,IAAIE,MAAM,GAAG,KAAKJ,KAAlB;MACA,KAAKA,KAAL;MACAG,WAAW,CAACE,GAAZ;MACA,OAAOD,MAAP;IACD,CAND,MAMO;MACL,MAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;IACD;EACF;;EACDN,KAAK,GAAG;IACN,OAAO,KAAKA,KAAZ;EACD;;EACDO,UAAU,CAACC,aAAD,EAAgBC,EAAhB,EAAoB;IAC5B,IAAIC,IAAI,GAAG,EAAX;IACAF,aAAa,CAACG,OAAd,CAAuBC,CAAD,IAAO;MAC3BF,IAAI,CAACG,IAAL,CAAU,KAAKZ,UAAL,CAAgBW,CAAhB,EAAmBH,EAAnB,CAAV;IACD,CAFD;IAGA,OAAOC,IAAP;EACD;;AAxBc;;AA0BjB,MAAMI,aAAN,CAAoB;EAClBhB,WAAW,CAACiB,IAAD,EAAOC,OAAP,EAAgBC,EAAhB,EAAoB;IAC7B,KAAKjB,KAAL,GAAagB,OAAO,CAAChB,KAArB;IACA,KAAKkB,EAAL,GAAUF,OAAV;IACA,KAAKG,IAAL;IACA,KAAKC,UAAL,GAAkBL,IAAlB;IACA,KAAKM,EAAL,GAAUJ,EAAV;EACD;;EACDE,IAAI,GAAG;IACL,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtB,KAAzB,EAAgCsB,CAAC,EAAjC,EAAqC;MACnC,KAAKA,CAAL,IAAU,KAAKJ,EAAL,CAAQI,CAAR,CAAV;IACD;;IACD,OAAO,KAAKJ,EAAZ;EACD;;EACDjB,UAAU,CAACC,IAAD,EAAO;IACf,IAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;MAC3B,KAAK,KAAKF,KAAV,IAAmBE,IAAnB;MACA,IAAIE,MAAM,GAAG,KAAKJ,KAAlB;MACA,KAAKA,KAAL;MACA,KAAKuB,OAAL;MACA,OAAOnB,MAAP;IACD,CAND,MAMO;MACL,MAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;IACD;EACF;;EACDiB,OAAO,GAAG;IACR,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKP,EAAL,CAAQQ,GAAR,CAAYC,MAAjC,CAAX,CAAX;IACA,IAAIC,IAAI,GAAG,EAAE,GAAGP,IAAI,CAAC,KAAKJ,UAAN,CAAT;MAA4B,GAAG;IAA/B,CAAX;IACA,OAAOW,IAAI,CAACV,EAAZ;IACAG,IAAI,CAAC,KAAKJ,UAAN,CAAJ,GAAwBW,IAAxB;IACA,OAAOA,IAAI,CAACX,UAAZ;IACAO,YAAY,CAACK,OAAb,CAAqB,KAAKX,EAAL,CAAQQ,GAAR,CAAYC,MAAjC,EAAyCL,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAzC;EACD;;EACDjB,UAAU,CAACC,aAAD,EAAgB;IACxB,IAAIE,IAAI,GAAG,EAAX;IACAF,aAAa,CAACG,OAAd,CAAuBC,CAAD,IAAO;MAC3BF,IAAI,CAACG,IAAL,CAAU,KAAKZ,UAAL,CAAgBW,CAAhB,CAAV;IACD,CAFD;IAGA,OAAOF,IAAP;EACD;;EACDV,KAAK,GAAG;IACN,OAAO,KAAKA,KAAZ;EACD;;AA1CiB;;AA4CpB,MAAMkC,IAAN,CAAW;EACTpC,WAAW,CAACc,CAAD,EAAI;IACb,KAAKiB,GAAL,GAAW;MACTC,MAAM,EAAE;IADC,CAAX;IAGA,KAAKD,GAAL,GAAW,EAAE,GAAG,KAAKA,GAAV;MAAe,GAAGjB;IAAlB,CAAX;IACA,KAAKuB,QAAL,GAAgB,EAAhB;IACA,KAAKhB,IAAL;IACA,KAAKiB,KAAL,GAAa,IAAb;EACD;;EACDjB,IAAI,GAAG;IACL,IAAI,CAACQ,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAL,EAA4C;MAC1CH,YAAY,CAACK,OAAb,CAAqB,KAAKH,GAAL,CAASC,MAA9B,EAAsCL,IAAI,CAACQ,SAAL,CAAe,KAAKE,QAApB,CAAtC;IACD;EACF;;EACDE,gBAAgB,CAACC,IAAD,EAAO;IACrB,IAAI,CAAC,KAAKC,gBAAL,CAAsBD,IAAtB,CAAL,EAAkC;MAChC,OAAQ,KAAKH,QAAL,CAAcG,IAAd,IAAsB,IAAIzC,UAAJ,CAAe,CAAf,CAA9B;IACD,CAFD,MAEO;MACL,IAAI2C,CAAC,GAAG,KAAKC,aAAL,CAAmBH,IAAnB,EAAyB,IAAzB,CAAR;MACA,OAAOE,CAAC,CAAC,IAAD,CAAD,CAAQ,OAAR,CAAP;MACA,OAAOA,CAAP;IACD;EACF;;EACDnC,GAAG,GAAG;IACJ,IAAIqC,QAAQ,GAAGjB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAf;IACA,IAAIa,KAAK,GAAG,EAAE,GAAGD,QAAL;MAAe,GAAG,KAAKP;IAAvB,CAAZ;IACAR,YAAY,CAACK,OAAb,CAAqB,KAAKH,GAAL,CAASC,MAA9B,EAAsCL,IAAI,CAACQ,SAAL,CAAeU,KAAf,CAAtC;EACD;;EACDF,aAAa,CAAC5C,UAAD,EAAawB,EAAb,EAAiB;IAC5B,IAAI,KAAKkB,gBAAL,CAAsB1C,UAAtB,CAAJ,EAAuC;MACrC,OAAO,IAAIiB,aAAJ,CAAkBjB,UAAlB,EAA8B,KAAK+C,QAAL,CAAc/C,UAAd,CAA9B,EAAyDwB,EAAzD,CAAP;IACD,CAFD,MAEO;MACL,MAAM,IAAIf,KAAJ,CAAU,0BAAV,CAAN;IACD;EACF;;EACDuC,SAAS,CAACC,CAAD,EAAI;IACX,IAAIC,WAAW,GAAG,EAAlB;IACAD,CAAC,CAACnC,OAAF,CAAWC,CAAD,IAAO;MACf,IAAI,OAAOoC,QAAQ,CAACpC,CAAD,CAAf,KAAuB,QAAvB,IAAmC,CAACqC,KAAK,CAACD,QAAQ,CAACpC,CAAD,CAAT,CAA7C,EAA4D;QAC1DmC,WAAW,CAAClC,IAAZ,CAAiBmC,QAAQ,CAACpC,CAAD,CAAzB;MACD;IACF,CAJD;IAKA,OAAOmC,WAAP;EACD;;EACDG,QAAQ,CAACrD,UAAD,EAAaK,IAAb,EAAmB;IACzB,IAAI4C,CAAC,GAAGK,MAAM,CAACC,IAAP,CAAYvD,UAAZ,CAAR;IACA,IAAIwD,YAAY,GAAGF,MAAM,CAACC,IAAP,CAAYlD,IAAZ,CAAnB;IACA,IAAIoD,YAAY,GAAG,EAAnB;IACA,IAAIP,WAAW,GAAG,KAAKF,SAAL,CAAeC,CAAf,CAAlB;IACAC,WAAW,CAACpC,OAAZ,CAAqB4C,KAAD,IAAW;MAC7B,IAAIC,OAAO,GAAG,CAAd;MACAH,YAAY,CAAC1C,OAAb,CAAsB8C,cAAD,IAAoB;QACvC,IAAIA,cAAc,IAAI5D,UAAU,CAAC0D,KAAD,CAAhC,EAAyC;UACvC,IAAIrD,IAAI,CAACuD,cAAD,CAAJ,KAAyB5D,UAAU,CAAC0D,KAAD,CAAV,CAAkBE,cAAlB,CAA7B,EAAgE;YAC9DD,OAAO;UACR;QACF;MACF,CAND;;MAOA,IAAIH,YAAY,CAACK,MAAb,KAAwBF,OAA5B,EAAqC;QACnC,IAAIG,OAAO,GAAG9D,UAAU,CAAC0D,KAAD,CAAxB;QACAI,OAAO,CAACC,QAAR,GAAmBL,KAAnB;QACAD,YAAY,CAACzC,IAAb,CAAkB8C,OAAlB;MACD;IACF,CAdD;;IAeA,IAAIL,YAAY,KAAK,EAArB,EAAyB;MACvB,OAAO,EAAP;IACD,CAFD,MAEO;MACL,OAAOA,YAAP;IACD;EACF;;EACDV,QAAQ,GAA6B;IAAA,IAA5B/C,UAA4B,uEAAf,EAAe;IAAA,IAAXK,IAAW,uEAAJ,EAAI;IACnC,IAAIsB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAX;;IACA,IAAIjC,UAAU,KAAK,EAAnB,EAAuB;MACrB,OAAO2B,IAAP;IACD,CAFD,MAEO;MACL,IAAI,CAAC,KAAKe,gBAAL,CAAsB1C,UAAtB,CAAL,EAAwC;QACtC,OAAO,IAAIS,KAAJ,CAAU,sBAAV,CAAP;MACD,CAFD,MAEO;QACL,IAAIJ,IAAI,KAAK,EAAT,IAAe,OAAOA,IAAP,IAAe,QAAlC,EAA4C;UAC1C,OAAOsB,IAAI,CAAC3B,UAAD,CAAX;QACD,CAFD,MAEO;UACL,IAAI,OAAOK,IAAP,KAAgB,QAApB,EAA8B;YAC5B,OAAO,KAAKgD,QAAL,CAAc1B,IAAI,CAAC3B,UAAD,CAAlB,EAAgCK,IAAhC,CAAP;UACD,CAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;YACnC,IAAIsB,IAAI,CAAC3B,UAAD,CAAJ,CAAiBK,IAAjB,MAA2B2D,SAA/B,EAA0C;cACxC,OAAOrC,IAAI,CAAC3B,UAAD,CAAJ,CAAiBK,IAAjB,CAAP;YACD,CAFD,MAEO;cACL,OAAO,IAAII,KAAJ,CAAU,YAAV,CAAP;YACD;UACF;QACF;MACF;IACF;EACF;;EACDwD,KAAK,CAACC,GAAD,EAAkB;IAAA,IAAZ/D,KAAY,uEAAJ,EAAI;IACrB,IAAIU,IAAI,GAAG,EAAX;;IACA,IAAIV,KAAK,IAAI,EAAT,IAAe,OAAOA,KAAP,IAAgB,QAAnC,EAA6C;MAC3C+D,GAAG,CAACpD,OAAJ,CAAaC,CAAD,IAAO;QACjB,IAAI,cAAcA,CAAlB,EAAqB;UACnBF,IAAI,CAACG,IAAL,CAAUD,CAAC,CAACgD,QAAZ;QACD;MACF,CAJD;MAKA,OAAOlD,IAAP;IACD,CAPD,MAOO;MACL,IAAIV,KAAK,GAAG+D,GAAG,CAACL,MAAhB,EAAwB;QACtB,OAAOK,GAAG,CAAC/D,KAAD,CAAH,CAAW4D,QAAlB;MACD,CAFD,MAEO;QACL,OAAO,IAAItD,KAAJ,CAAU,eAAV,CAAP;MACD;IACF;EACF;;EACD0D,QAAQ,CAACnE,UAAD,EAAa;IACnB,IAAI,CAAC,KAAK0C,gBAAL,CAAsB1C,UAAtB,CAAL,EAAwC;MACtC,OAAO,IAAIS,KAAJ,CAAU,sBAAV,CAAP;IACD,CAFD,MAEO;MACL,IAAIkB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAX;MACA,IAAIgB,CAAC,GAAG,KAAKD,SAAL,CAAeM,MAAM,CAACC,IAAP,CAAY5B,IAAI,CAAC3B,UAAD,CAAhB,CAAf,CAAR;MACA,OAAOiD,CAAP;IACD;EACF;;EACDP,gBAAgB,CAAC1C,UAAD,EAAa;IAC3B,IAAI2B,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAX;IACA,IAAIsB,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY5B,IAAZ,CAAX;IACA,IAAIgC,OAAO,GAAG,CAAd;;IACA,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,IAAI,CAACM,MAAzB,EAAiCpC,CAAC,EAAlC,EAAsC;MACpC,IAAIzB,UAAU,KAAKuD,IAAI,CAAC9B,CAAD,CAAvB,EAA4B;QAC1BkC,OAAO;MACR;IACF;;IACD,IAAIA,OAAO,GAAG,CAAd,EAAiB;MACf,OAAO,IAAP;IACD,CAFD,MAEO;MACL,OAAO,KAAP;IACD;EACF;;EACDS,WAAW,CAACpE,UAAD,EAAgC;IAAA,IAAnBqE,KAAmB,uEAAX,EAAW;IAAA,IAAPC,KAAO;;IACzC,IAAI,KAAK5B,gBAAL,CAAsB1C,UAAtB,CAAJ,EAAuC;MACrC,IAAIqE,KAAK,IAAI,EAAT,IAAe,OAAOA,KAAP,IAAgB,QAAnC,EAA6C;QAC3C,MAAM,IAAI5D,KAAJ,CAAU,gBAAV,CAAN;MACD,CAFD,MAEO;QACL,IAAIkB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAX;QACA,IAAIsC,WAAW,GAAG,KAAKvB,SAAL,CAAeM,MAAM,CAACC,IAAP,CAAY5B,IAAI,CAAC3B,UAAD,CAAhB,CAAf,CAAlB;;QACA,IAAIuE,WAAW,CAACC,QAAZ,CAAqBH,KAArB,CAAJ,EAAiC;UAC/B,IAAIC,KAAK,IAAI3C,IAAI,CAAC3B,UAAD,CAAJ,CAAiBqE,KAAjB,CAAb,EAAsC;YACpC,OAAO1C,IAAI,CAAC3B,UAAD,CAAJ,CAAiBqE,KAAjB,EAAwBC,KAAxB,CAAP;YACAxC,YAAY,CAACK,OAAb,CAAqB,KAAKH,GAAL,CAASC,MAA9B,EAAsCL,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAtC;UACD,CAHD,MAGO;YACL8C,OAAO,CAACC,GAAR,CAAY,IAAIjE,KAAJ,CAAU,sBAAV,CAAZ;UACD;QACF,CAPD,MAOO;UACL,MAAM,IAAIA,KAAJ,CAAU,eAAV,CAAN;QACD;MACF;IACF,CAjBD,MAiBO;MACL,MAAM,IAAIA,KAAJ,CAAU,0BAAV,CAAN;IACD;EACF;;EACDkE,gBAAgB,CAAC3E,UAAD,EAAyB;IAAA,IAAZqE,KAAY,uEAAJ,EAAI;;IACvC,IAAI,KAAK3B,gBAAL,CAAsB1C,UAAtB,CAAJ,EAAuC;MACrC,IAAI2B,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAX;;MACA,IAAIoC,KAAK,IAAI,EAAT,IAAe,OAAOA,KAAP,IAAgB,QAAnC,EAA6C;QAC3C,OAAO1C,IAAI,CAAC3B,UAAD,CAAX;QACA8B,YAAY,CAACK,OAAb,CAAqB,KAAKH,GAAL,CAASC,MAA9B,EAAsCL,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAtC;MACD,CAHD,MAGO;QACL,IAAI4C,WAAW,GAAG,KAAKvB,SAAL,CAAeM,MAAM,CAACC,IAAP,CAAY5B,IAAI,CAAC3B,UAAD,CAAhB,CAAf,CAAlB;;QACA,IAAIuE,WAAW,CAACC,QAAZ,CAAqBH,KAArB,CAAJ,EAAiC;UAC/B,OAAO1C,IAAI,CAAC3B,UAAD,CAAJ,CAAiBqE,KAAjB,CAAP;UACA1C,IAAI,CAAC3B,UAAD,CAAJ,CAAiBG,KAAjB,GAAyB,EAAEwB,IAAI,CAAC3B,UAAD,CAAJ,CAAiBG,KAA5C;UACA2B,YAAY,CAACK,OAAb,CAAqB,KAAKH,GAAL,CAASC,MAA9B,EAAsCL,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAtC;QACD,CAJD,MAIO;UACL,MAAM,IAAIlB,KAAJ,CAAU,eAAV,CAAN;QACD;MACF;IACF,CAfD,MAeO;MACL,MAAM,IAAIA,KAAJ,CAAU,0BAAV,CAAN;IACD;EACF;;EACDmE,EAAE,CAACjD,IAAD,EAAO3B,UAAP,EAAmBqE,KAAnB,EAA0BQ,WAA1B,EAAuC;IACvC,IAAIC,OAAO,GAAGxB,MAAM,CAACC,IAAP,CAAYsB,WAAZ,CAAd;IACAC,OAAO,CAAChE,OAAR,CAAiBC,CAAD,IAAO;MACrBY,IAAI,CAAC3B,UAAD,CAAJ,CAAiBqE,KAAjB,EAAwBtD,CAAxB,IAA6B8D,WAAW,CAAC9D,CAAD,CAAxC;IACD,CAFD;IAGAe,YAAY,CAACK,OAAb,CAAqB,KAAKH,GAAL,CAASC,MAA9B,EAAsCL,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAtC;EACD;;EACDoD,EAAE,CAAC/E,UAAD,EAAaqE,KAAb,EAAoBQ,WAApB,EAAiC;IACjC,IAAIR,KAAK,IAAI,EAAT,IAAe,OAAOA,KAAP,IAAgB,QAAnC,EAA6C;MAC3C,MAAM,IAAI5D,KAAJ,CAAU,gBAAV,CAAN;IACD,CAFD,MAEO;MACL,IAAIkB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,KAAKC,GAAL,CAASC,MAA9B,CAAX,CAAX;MACA,IAAIsC,WAAW,GAAG,KAAKvB,SAAL,CAAeM,MAAM,CAACC,IAAP,CAAY5B,IAAI,CAAC3B,UAAD,CAAhB,CAAf,CAAlB;;MACA,IAAIuE,WAAW,CAACC,QAAZ,CAAqBH,KAArB,CAAJ,EAAiC;QAC/B,IACE,OAAOQ,WAAP,IAAsB,QAAtB,IACAvB,MAAM,CAACC,IAAP,CAAYsB,WAAZ,EAAyBhB,MAAzB,KAAoC,CAFtC,EAGE;UACA,KAAKe,EAAL,CAAQjD,IAAR,EAAc3B,UAAd,EAA0BqE,KAA1B,EAAiCQ,WAAjC;QACD,CALD,MAKO;UACL,IAAIvB,MAAM,CAACC,IAAP,CAAYsB,WAAZ,EAAyBhB,MAAzB,KAAoC,CAAxC,EAA2C;YACzC,MAAM,IAAIpD,KAAJ,CAAU,gCAAV,CAAN;UACD,CAFD,MAEO;YACL,MAAM,IAAIA,KAAJ,CAAU,0BAAV,CAAN;UACD;QACF;MACF,CAbD,MAaO;QACL,MAAM,IAAIA,KAAJ,CAAU,eAAV,CAAN;MACD;IACF;EACF;;EACDuE,EAAE,CAACC,GAAD,EAAMf,GAAN,EAAW;IACX,OAAO,KAAKD,KAAL,CAAW,KAAKlB,QAAL,CAAckC,GAAd,EAAmBf,GAAnB,CAAX,EAAoC,CAApC,CAAP;EACD;;EACDgB,UAAU,CAAClF,UAAD,EAAaqE,KAAb,EAAsC;IAAA,IAAlBQ,WAAkB,uEAAJ,EAAI;;IAC9C,IAAI,KAAKnC,gBAAL,CAAsB1C,UAAtB,CAAJ,EAAuC;MACrC,IAAI,OAAOqE,KAAP,IAAgB,WAApB,EAAiC;QAC/B,MAAM,IAAI5D,KAAJ,CAAU,gBAAV,CAAN;MACD,CAFD,MAEO;QACL,IAAIoE,WAAW,IAAI,EAAnB,EAAuB;UACrB,MAAM,IAAIpE,KAAJ,CAAU,0BAAV,CAAN;QACD,CAFD,MAEO;UACL,IAAI0E,KAAK,CAACC,OAAN,CAAcf,KAAd,CAAJ,EAA0B;YACxB,IAAIA,KAAK,CAACR,MAAN,GAAe,CAAnB,EAAsB;cACpBQ,KAAK,CAACvD,OAAN,CAAeuE,EAAD,IAAQ;gBACpB,KAAKN,EAAL,CAAQ/E,UAAR,EAAoBqF,EAApB,EAAwBR,WAAxB;cACD,CAFD;YAGD,CAJD,MAIO;cACL,MAAM,IAAIpE,KAAJ,CAAU,oBAAV,CAAN;YACD;UACF,CARD,MAQO;YACL,KAAKsE,EAAL,CAAQ/E,UAAR,EAAoBqE,KAApB,EAA2BQ,WAA3B;UACD;QACF;MACF;IACF,CApBD,MAoBO;MACL,MAAM,IAAIpE,KAAJ,CAAU,0BAAV,CAAN;IACD;EACF;;EACD6E,OAAO,CAACvE,CAAD,EAAI;IACT,OAAO,KAAKiC,SAAL,CAAeM,MAAM,CAACC,IAAP,CAAYxC,CAAZ,CAAf,CAAP;EACD;;AA/OQ;;AAiPX,eAAe,IAAIsB,IAAJ,EAAf"},"metadata":{},"sourceType":"module"}