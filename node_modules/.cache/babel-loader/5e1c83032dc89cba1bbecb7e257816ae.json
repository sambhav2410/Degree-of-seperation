{"ast":null,"code":"let totalNodes;\nlet path = [];\nlet graphList = [];\nlet visited = [];\n\nfunction createGraph(n) {\n  totalNodes = n;\n\n  for (let index = 0; index < totalNodes; index++) {\n    graphList[index] = [];\n  }\n}\n\nfunction relation(s, d) {\n  graphList[s].push(d);\n}\n\nfunction view(s, d) {\n  let test = {\n    allPath: []\n  };\n\n  for (let index = 0; index < totalNodes; index++) {\n    visited[index] = false;\n  }\n\n  path = [];\n  path.push(s);\n  findOtherPaths(s, d, visited, path, test);\n  return test.allPath;\n}\n\nfunction findOtherPaths(s, d, visited, path, allpath) {\n  if (s === d) {\n    let d = [];\n\n    for (let i = 0; i < path.length; i++) {\n      d[i] = path[i];\n    }\n\n    allpath.allPath.push(d);\n    return;\n  }\n\n  visited[s] = true;\n\n  for (let i = 0; i < graphList[s].length; i++) {\n    if (!visited[graphList[s][i]]) {\n      path.push(graphList[s][i]);\n      findOtherPaths(graphList[s][i], d, visited, path, allpath);\n      path.splice(path.indexOf(graphList[s][i], 1));\n    }\n  }\n\n  visited[s] = false;\n}\n\nexport { createGraph, relation, view };","map":{"version":3,"names":["totalNodes","path","graphList","visited","createGraph","n","index","relation","s","d","push","view","test","allPath","findOtherPaths","allpath","i","length","splice","indexOf"],"sources":["C:/internship/Degree-of-seperation/src/utility/utility.js"],"sourcesContent":["let totalNodes;\r\nlet path = [];\r\nlet graphList = [];\r\nlet visited = [];\r\n\r\nfunction createGraph(n) {\r\n  totalNodes = n;\r\n  for (let index = 0; index < totalNodes; index++) {\r\n    graphList[index] = [];\r\n  }\r\n}\r\nfunction relation(s, d) {\r\n  graphList[s].push(d);\r\n}\r\nfunction view(s, d) {\r\n  let test = {\r\n    allPath: [],\r\n  };\r\n  for (let index = 0; index < totalNodes; index++) {\r\n    visited[index] = false;\r\n  }\r\n  path = [];\r\n  path.push(s);\r\n  findOtherPaths(s, d, visited, path, test);\r\n  return test.allPath;\r\n}\r\nfunction findOtherPaths(s, d, visited, path, allpath) {\r\n  if (s === d) {\r\n    let d = [];\r\n    for (let i = 0; i < path.length; i++) {\r\n      d[i] = path[i];\r\n    }\r\n    allpath.allPath.push(d);\r\n    return;\r\n  }\r\n  visited[s] = true;\r\n  for (let i = 0; i < graphList[s].length; i++) {\r\n    if (!visited[graphList[s][i]]) {\r\n      path.push(graphList[s][i]);\r\n      findOtherPaths(graphList[s][i], d, visited, path, allpath);\r\n      path.splice(path.indexOf(graphList[s][i], 1));\r\n    }\r\n  }\r\n  visited[s] = false;\r\n}\r\n\r\nexport { createGraph, relation, view};\r\n"],"mappings":"AAAA,IAAIA,UAAJ;AACA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,OAAO,GAAG,EAAd;;AAEA,SAASC,WAAT,CAAqBC,CAArB,EAAwB;EACtBL,UAAU,GAAGK,CAAb;;EACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,UAA5B,EAAwCM,KAAK,EAA7C,EAAiD;IAC/CJ,SAAS,CAACI,KAAD,CAAT,GAAmB,EAAnB;EACD;AACF;;AACD,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;EACtBP,SAAS,CAACM,CAAD,CAAT,CAAaE,IAAb,CAAkBD,CAAlB;AACD;;AACD,SAASE,IAAT,CAAcH,CAAd,EAAiBC,CAAjB,EAAoB;EAClB,IAAIG,IAAI,GAAG;IACTC,OAAO,EAAE;EADA,CAAX;;EAGA,KAAK,IAAIP,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,UAA5B,EAAwCM,KAAK,EAA7C,EAAiD;IAC/CH,OAAO,CAACG,KAAD,CAAP,GAAiB,KAAjB;EACD;;EACDL,IAAI,GAAG,EAAP;EACAA,IAAI,CAACS,IAAL,CAAUF,CAAV;EACAM,cAAc,CAACN,CAAD,EAAIC,CAAJ,EAAON,OAAP,EAAgBF,IAAhB,EAAsBW,IAAtB,CAAd;EACA,OAAOA,IAAI,CAACC,OAAZ;AACD;;AACD,SAASC,cAAT,CAAwBN,CAAxB,EAA2BC,CAA3B,EAA8BN,OAA9B,EAAuCF,IAAvC,EAA6Cc,OAA7C,EAAsD;EACpD,IAAIP,CAAC,KAAKC,CAAV,EAAa;IACX,IAAIA,CAAC,GAAG,EAAR;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAAI,CAACgB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpCP,CAAC,CAACO,CAAD,CAAD,GAAOf,IAAI,CAACe,CAAD,CAAX;IACD;;IACDD,OAAO,CAACF,OAAR,CAAgBH,IAAhB,CAAqBD,CAArB;IACA;EACD;;EACDN,OAAO,CAACK,CAAD,CAAP,GAAa,IAAb;;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,SAAS,CAACM,CAAD,CAAT,CAAaS,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;IAC5C,IAAI,CAACb,OAAO,CAACD,SAAS,CAACM,CAAD,CAAT,CAAaQ,CAAb,CAAD,CAAZ,EAA+B;MAC7Bf,IAAI,CAACS,IAAL,CAAUR,SAAS,CAACM,CAAD,CAAT,CAAaQ,CAAb,CAAV;MACAF,cAAc,CAACZ,SAAS,CAACM,CAAD,CAAT,CAAaQ,CAAb,CAAD,EAAkBP,CAAlB,EAAqBN,OAArB,EAA8BF,IAA9B,EAAoCc,OAApC,CAAd;MACAd,IAAI,CAACiB,MAAL,CAAYjB,IAAI,CAACkB,OAAL,CAAajB,SAAS,CAACM,CAAD,CAAT,CAAaQ,CAAb,CAAb,EAA8B,CAA9B,CAAZ;IACD;EACF;;EACDb,OAAO,CAACK,CAAD,CAAP,GAAa,KAAb;AACD;;AAED,SAASJ,WAAT,EAAsBG,QAAtB,EAAgCI,IAAhC"},"metadata":{},"sourceType":"module"}