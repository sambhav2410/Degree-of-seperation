[{"C:\\internship\\Degree-of-seperation\\src\\index.js":"1","C:\\internship\\Degree-of-seperation\\src\\App.js":"2","C:\\internship\\Degree-of-seperation\\src\\pages\\home\\Home.jsx":"3","C:\\internship\\Degree-of-seperation\\src\\pages\\view\\View.jsx":"4","C:\\internship\\Degree-of-seperation\\src\\pages\\relation\\Relation.jsx":"5","C:\\internship\\Degree-of-seperation\\src\\curd\\curd.js":"6","C:\\internship\\Degree-of-seperation\\src\\utility\\utility.js":"7","C:\\internship\\Degree-of-seperation\\src\\components\\header\\Header.jsx":"8"},{"size":246,"mtime":1651411541711,"results":"9","hashOfConfig":"10"},{"size":590,"mtime":1651411541705,"results":"11","hashOfConfig":"10"},{"size":1663,"mtime":1651411541712,"results":"12","hashOfConfig":"10"},{"size":3755,"mtime":1651416695135,"results":"13","hashOfConfig":"10"},{"size":3106,"mtime":1651415817250,"results":"14","hashOfConfig":"10"},{"size":9227,"mtime":1651411541710,"results":"15","hashOfConfig":"10"},{"size":1082,"mtime":1651411541720,"results":"16","hashOfConfig":"10"},{"size":671,"mtime":1651416221682,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19wsr88",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\internship\\Degree-of-seperation\\src\\index.js",[],"C:\\internship\\Degree-of-seperation\\src\\App.js",["41","42"],"import React, { createContext, useReducer } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./pages/home/Home\";\r\nimport View from \"./pages/view/View\";\r\nimport Relation from \"./pages/relation/Relation\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"/view\" exact>\r\n            <View />\r\n          </Route>\r\n          <Route path=\"/connect\" exact>\r\n            <Relation />\r\n          </Route>\r\n        </Switch>\r\n    </>\r\n  );\r\n}","C:\\internship\\Degree-of-seperation\\src\\pages\\home\\Home.jsx",["43","44"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport curd from \"../../curd/curd\";\r\nimport Header from \"../../components/header/Header\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"./home.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nexport default function Home() {\r\n  useEffect(() => {\r\n    if (!curd.existsCollection(\"friends\")) {\r\n      const friends = curd.createCollection(\"friends\");\r\n      friends.insertData({ allPair: [] }, curd);\r\n    }\r\n  },[]);\r\n  const ref = useRef(null);\r\n  const add = (e) => {\r\n    e.preventDefault();\r\n    if (ref.current.value == \"\") {\r\n      toast.error(\"Enter a name\");\r\n    } else {\r\n      if (curd.readData(\"users\", { name: ref.current.value }).length > 0) {\r\n        toast.error(\"Name is already present\");\r\n      } else {\r\n        try {\r\n          let nm = ref.current.value;\r\n          let col = curd.createCollection(\"users\");\r\n          col.insertData(\r\n            {\r\n              name: nm,\r\n            },\r\n            curd\r\n          );\r\n          ref.current.value = \"\";\r\n          toast.success(\"Added\", { autoClose: 1000 });\r\n        } catch (e) {\r\n          toast.error(\"Something went wrong\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"home\">\r\n        <div className=\"formcontainer\">\r\n          <form action=\"\">\r\n            <h4>Add Person</h4>\r\n            <input type=\"text\" placeholder=\"Enter Name\" ref={ref} />\r\n            <button className=\"btn\" onClick={add}>\r\n              Add\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </section>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n","C:\\internship\\Degree-of-seperation\\src\\pages\\view\\View.jsx",["45","46","47"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { createGraph, relation, view } from \"../../utility/utility\";\r\nimport Header from \"../../components/header/Header\";\r\nimport curd from \"../../curd/curd\";\r\nimport \"./view.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nexport default function View() {\r\n  const [state, setstate] = useState(null);\r\n  const [rel, setRel] = useState(null);\r\n  const ref = useRef(null);\r\n  const ref2 = useRef(null);\r\n  const fetch = () => {\r\n    let user = curd.readData(\"users\");\r\n    let keys = curd.getKeys(user);\r\n    let names = [];\r\n    for (let i = 0; i < keys.length; i++) {\r\n      names.push(user[keys[i]].name);\r\n    }\r\n    setstate(names);\r\n  };\r\n  function create() {\r\n    try {\r\n      const data = curd.readData(\"users\");\r\n      createGraph(data.count);\r\n      const v = curd.readData(\"friends\");\r\n      const af = v[0].allPair;\r\n      for (let i = 0; i < af.length; i++) {\r\n        relation(af[i][0], af[i][1]);\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    create();\r\n    fetch();\r\n  }, []);\r\n  function view_r(e) {\r\n    e.preventDefault();\r\n    const user1 = ref.current.value;\r\n    const user2 = ref2.current.value;\r\n    if (user1 == \"\" || user2 == \"\") {\r\n      toast.error(\"Select 2 name first\");\r\n    } else {\r\n      if (user1 === user2) {\r\n        toast.error(\"Same person cannot be a friend\");\r\n      } else {\r\n        const id1 = curd.Id(\"users\", { name: user1 });\r\n        const id2 = curd.Id(\"users\", { name: user2 });\r\n        const st = view(id1, id2);\r\n        let rNames = [];\r\n        st.forEach((e) => {\r\n          let temp = [];\r\n          e.forEach((f) => {\r\n            temp.push(curd.readData(\"users\", f).name);\r\n          });\r\n          rNames.push(temp);\r\n          temp = [];\r\n        });\r\n        setRel(rNames);\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"view\">\r\n        <div className=\"formrow\">\r\n          <div className=\"formcontainer\">\r\n            <form action=\"\">\r\n              <h4>View Relation</h4>\r\n              <select type=\"text\" placeholder=\"Enter Name\" ref={ref}>\r\n                <option value=\"\">Select first Person</option>\r\n                {state?.map((e) => (\r\n                  <Option value={e} />\r\n                ))}\r\n              </select>\r\n              <select type=\"text\" placeholder=\"Enter Name\" ref={ref2}>\r\n                <option value=\"\">Select second Person</option>\r\n                {state?.map((e) => (\r\n                  <Option value={e} />\r\n                ))}\r\n              </select>\r\n              <button\r\n                className=\"btn\"\r\n                style={{ marginTop: \"2rem\" }}\r\n                onClick={view_r}\r\n              >\r\n                View\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className=\"relationview\">\r\n          {rel?.map((e) => (\r\n            <Box sr={e} />\r\n          ))}\r\n        </div>\r\n      </section>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\nconst Box = (props) => {\r\n  return (\r\n    <>\r\n      <div style={{ color: \"white\" }} className=\"viewBx\">\r\n        {props.sr.map((e, i, { length }) => (\r\n          <Singlenode name={e} index={i} length={length} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst Singlenode = (props) => {\r\n  return (\r\n    <>\r\n      <span className=\"indi\">{props.index == 0 ? \"\" : \">\"}</span>\r\n      <div style={{ color: \"white\" }} className=\"singlenode\">\r\n        {props.name}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nconst Option = (props) => {\r\n  return (\r\n    <>\r\n      <option value={props.value}>{props.value}</option>\r\n    </>\r\n  );\r\n};\r\n","C:\\internship\\Degree-of-seperation\\src\\pages\\relation\\Relation.jsx",["48","49","50","51","52","53"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport curd from \"../../curd/curd\";\r\nimport Header from \"../../components/header/Header\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"./relation.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nexport default function Relation() {\r\n  const [state, setstate] = useState(null);\r\n  const ref = useRef(null);\r\n  const ref2 = useRef(null);\r\n  const fetch = () => {\r\n    let user = curd.readData(\"users\");\r\n    let keys = curd.getKeys(user);\r\n    let names = [];\r\n    for (let i = 0; i < keys.length; i++) {\r\n      names.push(user[keys[i]].name);\r\n    }\r\n    setstate(names);\r\n  };\r\n  useEffect(() => {\r\n    fetch();\r\n  }, []);\r\n  const addRelation = (e) => {\r\n    e.preventDefault();\r\n    const user1 = ref.current.value;\r\n    const user2 = ref2.current.value;\r\n    if(user1=='' || user2==\"\"){\r\n      toast.error(\"Choose friends first\");\r\n    }else{\r\n      if (user1 === user2) {\r\n        toast.error(\"Same person cannot be a friend\");\r\n      } else {\r\n        const id1 = curd.Id(\"users\", { name: user1 });\r\n        const id2 = curd.Id(\"users\", { name: user2 });\r\n        const pair = [id1, id2];\r\n        const pair2 = [id2, id1];\r\n        if (curd.existsCollection(\"friends\")) {\r\n          const all = curd.readData(\"friends\")[0].allPair;\r\n          let count = 0;\r\n          for (let i = 0; i < all.length; i++) {\r\n            const c = all[i];\r\n            if (\r\n              (c[0] == pair[0] && c[1] == pair[1]) ||\r\n              (c[1] == pair[0] && c[0] == pair[1])\r\n            ) {\r\n              count++;\r\n            }\r\n          }\r\n          if (count > 0) {\r\n            toast.error(\"Already Friend\");\r\n          } else {\r\n            all.push(pair);\r\n            all.push(pair2);\r\n            curd.updateData(\"friends\", 0, { allPair: all });\r\n            ref.current.value=''\r\n            ref2.current.value=''\r\n            toast.success(\"connected\",{ autoClose: 1000 });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Header />\r\n      <section className=\"home\">\r\n        <div className=\"formcontainer\">\r\n          <form action=\"\">\r\n            <h4>Relationship</h4>\r\n            <select type=\"text\" placeholder=\"Enter Name\" ref={ref}>\r\n              <option value=\"\">Select first Person</option>\r\n              {state?.map((e) => (\r\n                <Option value={e} />\r\n              ))}\r\n            </select>\r\n            <select type=\"text\" placeholder=\"Enter Name\" ref={ref2}>\r\n              <option value=\"\">Select second Person</option>\r\n              {state?.map((e) => (\r\n                <Option value={e} />\r\n              ))}\r\n            </select>\r\n            <button\r\n              className=\"btn\"\r\n              style={{ marginTop: \"2rem\" }}\r\n              onClick={addRelation}\r\n            >\r\n              Connect\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </section>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\nconst Option = (props) => {\r\n  return (\r\n    <>\r\n      <option value={props.value}>{props.value}</option>\r\n    </>\r\n  );\r\n};\r\n","C:\\internship\\Degree-of-seperation\\src\\curd\\curd.js",["54","55","56","57","58","59","60","61","62","63","64"],"// @author Ayondip Jana.\r\n// @github https://github.com/detronetdip/CURD.js\r\nclass collection {\r\n  constructor(ct) {\r\n    this.count = ct;\r\n  }\r\n  insertData(data, setFunction) {\r\n    if (typeof data == \"object\") {\r\n      this[this.count] = data;\r\n      var cindex = this.count;\r\n      this.count++;\r\n      setFunction.set();\r\n      return cindex;\r\n    } else {\r\n      throw new Error(\"Expected Object Got None\");\r\n    }\r\n  }\r\n  count() {\r\n    return this.count;\r\n  }\r\n  insertMany(arrayOfObject, sf) {\r\n    var temp = [];\r\n    arrayOfObject.forEach((e) => {\r\n      temp.push(this.insertData(e, sf));\r\n    });\r\n    return temp;\r\n  }\r\n}\r\nclass oldCollection {\r\n  constructor(clcn, oldData, db) {\r\n    this.count = oldData.count;\r\n    this.od = oldData;\r\n    this.init();\r\n    this.instanceOf = clcn;\r\n    this.DB = db;\r\n  }\r\n  init() {\r\n    for (var i = 0; i < this.count; i++) {\r\n      this[i] = this.od[i];\r\n    }\r\n    delete this.od;\r\n  }\r\n  insertData(data) {\r\n    if (typeof data == \"object\") {\r\n      this[this.count] = data;\r\n      var cindex = this.count;\r\n      this.count++;\r\n      this.setData();\r\n      return cindex;\r\n    } else {\r\n      throw new Error(\"Expected Object Got None\");\r\n    }\r\n  }\r\n  setData() {\r\n    var Data = JSON.parse(localStorage.getItem(this.DB.env.dbname));\r\n    var sync = { ...Data[this.instanceOf], ...this };\r\n    delete sync.DB;\r\n    Data[this.instanceOf] = sync;\r\n    delete sync.instanceOf;\r\n    localStorage.setItem(this.DB.env.dbname, JSON.stringify(Data));\r\n  }\r\n  insertMany(arrayOfObject) {\r\n    var temp = [];\r\n    arrayOfObject.forEach((e) => {\r\n      temp.push(this.insertData(e));\r\n    });\r\n    return temp;\r\n  }\r\n  count() {\r\n    return this.count;\r\n  }\r\n}\r\nclass CURD {\r\n  constructor(e) {\r\n    this.env = {\r\n      dbname: \"database\",\r\n    };\r\n    this.env = { ...this.env, ...e };\r\n    this.database = {};\r\n    this.init();\r\n    this._this = this;\r\n  }\r\n  init() {\r\n    if (!localStorage.getItem(this.env.dbname)) {\r\n      localStorage.setItem(this.env.dbname, JSON.stringify(this.database));\r\n    }\r\n  }\r\n  createCollection(name) {\r\n    if (!this.existsCollection(name)) {\r\n      return (this.database[name] = new collection(0));\r\n    } else {\r\n      var c = this.getCollection(name, this);\r\n      delete c[\"DB\"][\"_this\"];\r\n      return c;\r\n    }\r\n  }\r\n  set() {\r\n    var previous = JSON.parse(localStorage.getItem(this.env.dbname));\r\n    var final = { ...previous, ...this.database };\r\n    localStorage.setItem(this.env.dbname, JSON.stringify(final));\r\n  }\r\n  getCollection(collection, DB) {\r\n    if (this.existsCollection(collection)) {\r\n      return new oldCollection(collection, this.readData(collection), DB);\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  refineIds(k) {\r\n    var refinedKeys = [];\r\n    k.forEach((e) => {\r\n      if (typeof parseInt(e) === \"number\" && !isNaN(parseInt(e))) {\r\n        refinedKeys.push(parseInt(e));\r\n      }\r\n    });\r\n    return refinedKeys;\r\n  }\r\n  findData(collection, data) {\r\n    var k = Object.keys(collection);\r\n    var receivedKeys = Object.keys(data);\r\n    var foundObjects = [];\r\n    var refinedKeys = this.refineIds(k);\r\n    refinedKeys.forEach((value) => {\r\n      var counter = 0;\r\n      receivedKeys.forEach((receivedValues) => {\r\n        if (receivedValues in collection[value]) {\r\n          if (data[receivedValues] == collection[value][receivedValues]) {\r\n            counter++;\r\n          }\r\n        }\r\n      });\r\n      if (receivedKeys.length == counter) {\r\n        var tempObj = collection[value];\r\n        tempObj.objectId = value;\r\n        foundObjects.push(tempObj);\r\n      }\r\n    });\r\n    if (foundObjects == \"\") {\r\n      return [];\r\n    } else {\r\n      return foundObjects;\r\n    }\r\n  }\r\n  readData(collection = \"\", data = \"\") {\r\n    var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n    if (collection == \"\") {\r\n      return Data;\r\n    } else {\r\n      if (!this.existsCollection(collection)) {\r\n        return new Error(\"Collection Not Found\");\r\n      } else {\r\n        if (data == \"\" && typeof data != \"number\") {\r\n          return Data[collection];\r\n        } else {\r\n          if (typeof data === \"object\") {\r\n            return this.findData(Data[collection], data);\r\n          } else if (typeof data === \"number\") {\r\n            if (Data[collection][data] != undefined) {\r\n              return Data[collection][data];\r\n            } else {\r\n              return new Error(\"Invalid Id\");\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getId(obj, count = \"\") {\r\n    var temp = [];\r\n    if (count == \"\" && typeof count != \"number\") {\r\n      obj.forEach((e) => {\r\n        if (\"objectId\" in e) {\r\n          temp.push(e.objectId);\r\n        }\r\n      });\r\n      return temp;\r\n    } else {\r\n      if (count < obj.length) {\r\n        return obj[count].objectId;\r\n      } else {\r\n        return new Error(\"Invalid Index\");\r\n      }\r\n    }\r\n  }\r\n  getAllId(collection) {\r\n    if (!this.existsCollection(collection)) {\r\n      return new Error(\"Collection Not Found\");\r\n    } else {\r\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n      var k = this.refineIds(Object.keys(Data[collection]));\r\n      return k;\r\n    }\r\n  }\r\n  existsCollection(collection) {\r\n    var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n    var keys = Object.keys(Data);\r\n    var counter = 0;\r\n    for (var i = 0; i < keys.length; i++) {\r\n      if (collection === keys[i]) {\r\n        counter++;\r\n      }\r\n    }\r\n    if (counter > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  deleteField(collection, index = \"\", field) {\r\n    if (this.existsCollection(collection)) {\r\n      if (index == \"\" && typeof index != \"number\") {\r\n        throw new Error(\"Index Required\");\r\n      } else {\r\n        var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n        var ExistingIds = this.refineIds(Object.keys(Data[collection]));\r\n        if (ExistingIds.includes(index)) {\r\n          if (field in Data[collection][index]) {\r\n            delete Data[collection][index][field];\r\n            localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n          } else {\r\n            console.log(new Error(\"Field does not exist\"));\r\n          }\r\n        } else {\r\n          throw new Error(\"Invalid Index\");\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  deleteCollection(collection, index = \"\") {\r\n    if (this.existsCollection(collection)) {\r\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n      if (index == \"\" && typeof index != \"number\") {\r\n        delete Data[collection];\r\n        localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n      } else {\r\n        var ExistingIds = this.refineIds(Object.keys(Data[collection]));\r\n        if (ExistingIds.includes(index)) {\r\n          delete Data[collection][index];\r\n          Data[collection].count = --Data[collection].count;\r\n          localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n        } else {\r\n          throw new Error(\"Invalid Index\");\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  ud(Data, collection, index, updatedData) {\r\n    var newKeys = Object.keys(updatedData);\r\n    newKeys.forEach((e) => {\r\n      Data[collection][index][e] = updatedData[e];\r\n    });\r\n    localStorage.setItem(this.env.dbname, JSON.stringify(Data));\r\n  }\r\n  uD(collection, index, updatedData) {\r\n    if (index == \"\" && typeof index != \"number\") {\r\n      throw new Error(\"Index Required\");\r\n    } else {\r\n      var Data = JSON.parse(localStorage.getItem(this.env.dbname));\r\n      var ExistingIds = this.refineIds(Object.keys(Data[collection]));\r\n      if (ExistingIds.includes(index)) {\r\n        if (\r\n          typeof updatedData == \"object\" &&\r\n          Object.keys(updatedData).length !== 0\r\n        ) {\r\n          this.ud(Data, collection, index, updatedData);\r\n        } else {\r\n          if (Object.keys(updatedData).length === 0) {\r\n            throw new Error(\"Empty Object can not be passed\");\r\n          } else {\r\n            throw new Error(\"Expected Object got none\");\r\n          }\r\n        }\r\n      } else {\r\n        throw new Error(\"Invalid Index\");\r\n      }\r\n    }\r\n  }\r\n  Id(col, obj) {\r\n    return this.getId(this.readData(col, obj), 0);\r\n  }\r\n  updateData(collection, index, updatedData = \"\") {\r\n    if (this.existsCollection(collection)) {\r\n      if (typeof index == \"undefined\") {\r\n        throw new Error(\"Index Required\");\r\n      } else {\r\n        if (updatedData == \"\") {\r\n          throw new Error(\"Expected Object got none\");\r\n        } else {\r\n          if (Array.isArray(index)) {\r\n            if (index.length > 0) {\r\n              index.forEach((id) => {\r\n                this.uD(collection, id, updatedData);\r\n              });\r\n            } else {\r\n              throw new Error(\"Empty array passed\");\r\n            }\r\n          } else {\r\n            this.uD(collection, index, updatedData);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(\"Collection doesn't exist\");\r\n    }\r\n  }\r\n  getKeys(e) {\r\n    return this.refineIds(Object.keys(e));\r\n  }\r\n}\r\nexport default new CURD();\r\n","C:\\internship\\Degree-of-seperation\\src\\utility\\utility.js",["65"],"let totalNodes;\r\nlet path = [];\r\nlet graphList = [];\r\nlet visited = [];\r\n\r\nfunction createGraph(n) {\r\n  totalNodes = n;\r\n  for (let index = 0; index < totalNodes; index++) {\r\n    graphList[index] = [];\r\n  }\r\n}\r\nfunction relation(s, d) {\r\n  graphList[s].push(d);\r\n}\r\nfunction view(s, d) {\r\n  let test = {\r\n    allPath: [],\r\n  };\r\n  for (let index = 0; index < totalNodes; index++) {\r\n    visited[index] = false;\r\n  }\r\n  path = [];\r\n  path.push(s);\r\n  findOtherPaths(s, d, visited, path, test);\r\n  return test.allPath;\r\n}\r\nfunction findOtherPaths(s, d, visited, path, allpath) {\r\n  if (s == d) {\r\n    let d = [];\r\n    for (let i = 0; i < path.length; i++) {\r\n      d[i] = path[i];\r\n    }\r\n    allpath.allPath.push(d);\r\n    return;\r\n  }\r\n  visited[s] = true;\r\n  for (let i = 0; i < graphList[s].length; i++) {\r\n    if (!visited[graphList[s][i]]) {\r\n      path.push(graphList[s][i]);\r\n      findOtherPaths(graphList[s][i], d, visited, path, allpath);\r\n      path.splice(path.indexOf(graphList[s][i], 1));\r\n    }\r\n  }\r\n  visited[s] = false;\r\n}\r\n\r\nexport { createGraph, relation, view};\r\n","C:\\internship\\Degree-of-seperation\\src\\components\\header\\Header.jsx",["66"],"import { Link } from \"react-router-dom\";\r\nimport \"./header.css\";\r\nexport default function Header() {\r\n  return (\r\n    <>\r\n      <header>\r\n        <div className=\"left\">\r\n          <div className=\"logo\">\r\n            <img src=\"./images/R.png\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"right\">\r\n          <Link to=\"/\">\r\n            <button className=\"btn\">Add</button>\r\n          </Link>\r\n\r\n          <Link to=\"/connect\">\r\n            <button className=\"btn\">Relationship</button>\r\n          </Link>\r\n\r\n          <Link to=\"/view\">\r\n            <button className=\"btn\">View</button>\r\n          </Link>\r\n        </div>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":30},{"ruleId":"67","severity":1,"message":"71","line":1,"column":32,"nodeType":"69","messageId":"70","endLine":1,"endColumn":42},{"ruleId":"67","severity":1,"message":"72","line":1,"column":36,"nodeType":"69","messageId":"70","endLine":1,"endColumn":44},{"ruleId":"73","severity":1,"message":"74","line":17,"column":27,"nodeType":"75","messageId":"76","endLine":17,"endColumn":29},{"ruleId":"73","severity":1,"message":"74","line":43,"column":15,"nodeType":"75","messageId":"76","endLine":43,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":43,"column":30,"nodeType":"75","messageId":"76","endLine":43,"endColumn":32},{"ruleId":"73","severity":1,"message":"74","line":119,"column":43,"nodeType":"75","messageId":"76","endLine":119,"endColumn":45},{"ruleId":"73","severity":1,"message":"74","line":27,"column":13,"nodeType":"75","messageId":"76","endLine":27,"endColumn":15},{"ruleId":"73","severity":1,"message":"74","line":27,"column":26,"nodeType":"75","messageId":"76","endLine":27,"endColumn":28},{"ruleId":"73","severity":1,"message":"74","line":43,"column":21,"nodeType":"75","messageId":"76","endLine":43,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":43,"column":40,"nodeType":"75","messageId":"76","endLine":43,"endColumn":42},{"ruleId":"73","severity":1,"message":"74","line":44,"column":21,"nodeType":"75","messageId":"76","endLine":44,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":44,"column":40,"nodeType":"75","messageId":"76","endLine":44,"endColumn":42},{"ruleId":"73","severity":1,"message":"74","line":127,"column":36,"nodeType":"75","messageId":"76","endLine":127,"endColumn":38},{"ruleId":"73","severity":1,"message":"74","line":132,"column":31,"nodeType":"75","messageId":"76","endLine":132,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":138,"column":22,"nodeType":"75","messageId":"76","endLine":138,"endColumn":24},{"ruleId":"73","severity":1,"message":"74","line":146,"column":20,"nodeType":"75","messageId":"76","endLine":146,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":152,"column":18,"nodeType":"75","messageId":"76","endLine":152,"endColumn":20},{"ruleId":"73","severity":1,"message":"77","line":158,"column":40,"nodeType":"75","messageId":"76","endLine":158,"endColumn":42},{"ruleId":"73","severity":1,"message":"74","line":170,"column":15,"nodeType":"75","messageId":"76","endLine":170,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":211,"column":17,"nodeType":"75","messageId":"76","endLine":211,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":234,"column":17,"nodeType":"75","messageId":"76","endLine":234,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":259,"column":15,"nodeType":"75","messageId":"76","endLine":259,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":290,"column":25,"nodeType":"75","messageId":"76","endLine":290,"endColumn":27},{"ruleId":"73","severity":1,"message":"74","line":28,"column":9,"nodeType":"75","messageId":"76","endLine":28,"endColumn":11},{"ruleId":"78","severity":1,"message":"79","line":9,"column":13,"nodeType":"80","endLine":9,"endColumn":41},"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]